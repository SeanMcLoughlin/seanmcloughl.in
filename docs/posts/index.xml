<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on seanmcloughl.in</title>
    
    
    
    <link>https://seanmcloughl.in/posts/</link>
    <description>Recent content in Posts on seanmcloughl.in</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Sean McLoughlin. Built with&amp;nbsp;&lt;a href=&#39;https://seanmcloughl.in/about-blog&#39;&gt;Hugo&lt;/a&gt;.</copyright>
    <lastBuildDate>Sun, 27 Dec 2020 14:45:50 -0800</lastBuildDate>
    
	<atom:link href="https://seanmcloughl.in/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VLaDOS Dev Blog: Intro</title>
      <link>https://seanmcloughl.in/posts/vlados-dev-blog-1-intro/</link>
      <pubDate>Sun, 27 Dec 2020 14:45:50 -0800</pubDate>
      
      <guid>https://seanmcloughl.in/posts/vlados-dev-blog-1-intro/</guid>
      <description>
        
          
          
          
        
        
        
          Today, I&amp;rsquo;ve finally begun work on the SystemVerilog compiler and simulator, VLaDOS. This project has been a long time coming, and I&amp;rsquo;ve had to learn a lot to even get to the point of being able to start writing it. This is probably the most ambitious project I have ever taken up, and is my first major open-source project. Because of that, I&amp;rsquo;m going to do development blogs for each alpha release of the tool that has major features &amp;ndash; starting with this one.
          
        
        </description>
    </item>
    
    <item>
      <title>Easter Eggs Are Never Okay</title>
      <link>https://seanmcloughl.in/posts/easter-eggs-are-never-okay/</link>
      <pubDate>Tue, 22 Dec 2020 12:07:17 -0800</pubDate>
      
      <guid>https://seanmcloughl.in/posts/easter-eggs-are-never-okay/</guid>
      <description>
        
          
          
          
        
        
        
          The Parable You&amp;rsquo;re writing a class to connect to your company&amp;rsquo;s application. You and your colleagues all agree that the feature this class is for is the coolest thing you&amp;rsquo;ve ever heard of &amp;ndash; it&amp;rsquo;s the &amp;ldquo;bees knees,&amp;rdquo; one of your colleagues keeps jesting.
Next thing you know, the driver of you mobbing session renames the class to the_bees_knees. Everyone giggles and moves on to working on other parts of the code base.
          
        
        </description>
    </item>
    
    <item>
      <title>How to Call Rust Code from SystemVerilog</title>
      <link>https://seanmcloughl.in/posts/how-to-call-rust-from-systemverilog/</link>
      <pubDate>Fri, 06 Nov 2020 21:31:31 -0700</pubDate>
      
      <guid>https://seanmcloughl.in/posts/how-to-call-rust-from-systemverilog/</guid>
      <description>
        
          
          
          
        
        
        
          The SystemVerilog Direct Programming Interface (DPI), at a high level, provides remote procedure calls in SystemVerilog. The entirety of the DPI&amp;rsquo;s definition can be read in the SystemVerilog IEEE standard (requires an account to access). Since SystemVerilog is quite a limiting language compared to general-purpose programming languages, being able to do remote procedure calls is an insanely powerful feature. However, it is commonly misunderstood that the DPI only allows users to call C functions.
          
        
        </description>
    </item>
    
    <item>
      <title>&#34;Modern&#34; Hardware Design</title>
      <link>https://seanmcloughl.in/posts/modern-hardware-design/</link>
      <pubDate>Mon, 14 Sep 2020 15:49:26 -0800</pubDate>
      
      <guid>https://seanmcloughl.in/posts/modern-hardware-design/</guid>
      <description>
        
          
          
          
        
        
        
          While software development tools are better than ever, hardware development tools are still stuck in the 90â€™s. How can this be fixed? I am a pre-silicon validation engineer. What that means is that I write software to test, analyze, and stress hardware designs to ensure that they adhere to their architectural specifications. Aside from a Linux environment, The common tools that I use for my job are:
 SystemVerilog: An IEEE-standard language designed for defining hardware at the Register Transfer Level (RTL), as well as the test benches to test that hardware.
          
        
        </description>
    </item>
    
  </channel>
</rss>