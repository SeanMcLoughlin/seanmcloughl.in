<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>seanmcloughl.in</title>
    
    
    
    <link>https://seanmcloughl.in/</link>
    <description>Recent content on seanmcloughl.in</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Sean McLoughlin. Built with&amp;nbsp;&lt;a href=&#39;https://seanmcloughl.in/about-blog&#39;&gt;Hugo&lt;/a&gt;.</copyright>
    <lastBuildDate>Fri, 06 Nov 2020 21:31:31 -0700</lastBuildDate>
    
	<atom:link href="https://seanmcloughl.in/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Call Rust Code from SystemVerilog</title>
      <link>https://seanmcloughl.in/posts/how-to-call-rust-from-systemverilog/</link>
      <pubDate>Fri, 06 Nov 2020 21:31:31 -0700</pubDate>
      
      <guid>https://seanmcloughl.in/posts/how-to-call-rust-from-systemverilog/</guid>
      <description>
        
          
          
          
        
        
        
          The SystemVerilog Direct Programming Interface (DPI), at a high level, provides remote procedure calls in SystemVerilog. The entirety of the DPI&amp;rsquo;s definition can be read in the SystemVerilog IEEE standard (requires an account to access). Since SystemVerilog is quite a limiting language compared to general-purpose programming languages, being able to do remote procedure calls is an insanely powerful feature. However, it is commonly misunderstood that the DPI only allows users to call C functions.
          
        
        </description>
    </item>
    
    <item>
      <title>&#34;Modern&#34; Hardware Design</title>
      <link>https://seanmcloughl.in/posts/modern-hardware-design/</link>
      <pubDate>Mon, 14 Sep 2020 15:49:26 -0800</pubDate>
      
      <guid>https://seanmcloughl.in/posts/modern-hardware-design/</guid>
      <description>
        
          
          
          
        
        
        
          While software development tools are better than ever, hardware development tools are still stuck in the 90â€™s. How can this be fixed? I am a pre-silicon validation engineer. What that means is that I write software to test, analyze, and stress hardware designs to ensure that they adhere to their architectural specifications. Aside from a Linux environment, The common tools that I use for my job are:
 SystemVerilog: An IEEE-standard language designed for defining hardware at the Register Transfer Level (RTL), as well as the test benches to test that hardware.
          
        
        </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://seanmcloughl.in/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanmcloughl.in/about/</guid>
      <description>
        
          
          
          
        
        
        
          Introduction My name is Sean McLoughlin.
I am a design verification engineer at Intel in Portland, OR. I&amp;rsquo;ve worked in IP validation for three years, worked on Intel&amp;rsquo;s 11th-gen SOCs, and have designed several software tools to aid in design verification efficiency.
I have experience with Synopsys and Cadence EDA tools to assist with DV, such as VCS and Verdi, as well as extensive experience writing testbenches with UVM in SystemVerilog.
          
        
        </description>
    </item>
    
    <item>
      <title>About Blog</title>
      <link>https://seanmcloughl.in/about-blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanmcloughl.in/about-blog/</guid>
      <description>
        
          
          
          
        
        
        
          This site is built with Hugo.
The theme is hello-friend.
It is hosted with GitHub Pages.
          
        
        </description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://seanmcloughl.in/future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanmcloughl.in/future/</guid>
      <description>
        
          
          
          
        
        
        
          Mind Dump This is just a mind dump of projects I plan to work on in the future. DM me on Twitter if you&amp;rsquo;re interested in working with me, or feel free to take these ideas for your own projects.
[ ] A terminal user interface waveform viewer. Inspired by tui-rs.
[ ] A GUI waveform viewer to complement the above.
[ ] A free and open-source SystemVerilog compiler. icarus-verilog doesn&amp;rsquo;t support most of SystemVerilog as far as I know, and most other offerings are not free.
          
        
        </description>
    </item>
    
    <item>
      <title>Present</title>
      <link>https://seanmcloughl.in/present/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanmcloughl.in/present/</guid>
      <description>
        
          
          
          
        
        
        
          Industry I currently work as a design verification engineer at Intel. Due to my non-disclosure agreement, I can&amp;rsquo;t mention what exactly I work on. You can see my skillset here.
Open Source vcd_rust A value change dump parser for Rust. The goal for this project is to create a parser for the VCD file type to be used in other projects. Rust was chosen due to its high performance, and it&amp;rsquo;s the hot new thing right now.
          
        
        </description>
    </item>
    
  </channel>
</rss>